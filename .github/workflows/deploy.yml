# workflow 工作流的名字，自定义
name: vue2-pc

# 配置触发条件
on:
  push: # 监听到 test 分支的 push 动作
    branches:
      - test

env:
  PROJECT: vue2-pc
  DOCKER_REGISTRY: registry.cn-heyuan.aliyuncs.com
  DOCKER_IMAGE: jinpengh/vue2-pc
  DOCKER_TAG: ${{ github.ref_name }}-${{ github.sha }}
  IMAGE: registry.cn-heyuan.aliyuncs.com/jinpengh/vue2-pc:${{ github.ref_name }}-${{ github.sha }}

# 工作流的任务集配置
jobs:
  # 定义一个 job，id 为 build
  build:
    # 指定任务执行的运行器。latest 表示是 GitHub 提供的最新稳定映像，但可能不是操作系统供应商提供的最新版本。
    runs-on: ubuntu-latest

    # 定义 job 的具体步骤
    steps: # 每一个 step 或者是执行一个 action，或者是执行一个命令
      - name: Checkout # 定义 step 的名字，方便作日志排查
        uses: actions/checkout@v3 # uses 表示该步骤使用一个 action 。斜线前面的 'actions' 表示这是官方的action

      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Build dist
        run: npm install && npm run build

      - name: Docker Compose Build A Service & Push Action
        uses: 1-1is0/docker-compose-build-push@publish
        with:
          image: ${{ env.DOCKER_IMAGE }}
          tags: ${{ env.DOCKER_TAG }}
          registry: ${{ env.DOCKER_REGISTRY }}
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_PASS }}
          dockerfile: Dockerfile
          serviceName: ${{ env.PROJECT }}
          pushImage: true

      - name: Deploy to Server # 执行部署任务
        uses: cross-the-world/ssh-scp-ssh-pipelines@latest # 第三方的 action
        with:
          host: ${{ secrets.SERVER_HOST }}
          user: ${{ secrets.SERVER_USER }}
          pass: ${{ secrets.SERVER_PASS }}

          # 由于网络情况，很容易超时，设置为60s
          connect_timeout: 60s

          # 将工作目录下的文件全部拷贝到部署服务器的工作目录
          scp: |
            ./docker-compose.yml => ./docker-compose/${{ env.PROJECT }}
            ./Dockerfile => ./docker-compose/${{ env.PROJECT }}

          # 完成拷贝后在部署服务器执行的命令：进入项目目录，安装生产依赖，并使用 pm2 管理
          last_ssh: |
            cd ./docker-compose/${{ env.PROJECT }}
            VUE2_PC_IMAGE="${{env.DOCKER_TAG}}" docker-compose up -d

          #  docker pull ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          #  docker stop ${{ env.PROJECT }}
          #  docker rm ${{ env.PROJECT }}
          #  docker run --name ${{ env.PROJECT }} -d -p 8080:80 ${{ env.DOCKER_REGISTRY }}/${{ env.DOCKER_IMAGE }}:${{ env.DOCKER_TAG }}
          #  docker image prune -f
          #  docker container prune -f
